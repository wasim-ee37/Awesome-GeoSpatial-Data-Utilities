How to polygonize a raster layer i.e. convert raster layer to a vector layer of all pixels as separate polygons using rasterio/rioxarray and GeoPandas?

a) Rioxarray is python library which combines xarray and rasterio library for raster analysis. 
b) Xarray is an open source python package that makes working with labelled multi dimensional array very efficient.
c) 

Method using QGIS:
Since QGIS 3.4 there is an algorithm called "Raster pixels to polygons" available at "Processing Toolbox -> Vector creation -> Raster pixels to polygons".
(https://gis.stackexchange.com/questions/294592/converting-raster-to-vector-and-creating-polygons-based-on-each-pixel-in-qgis)

Code1:
(https://gis.stackexchange.com/questions/455980/vectorizing-all-pixels-as-separate-polygons-using-rasterio)

import rasterio
from rasterio.features import shapes
import numpy as np
import geopandas as gpd

file = r"input.tif"

mask = None
with rasterio.Env():
  with rasterio.open(file) as src:
      image = src.read(1) # first band
  
      newimage = np.random.uniform(size=image.shape).astype(np.float32) #Create an array of random floats between 0-1 with the same shape as the raster
      newimage = image+newimage #Sum the original and random array
  
      results = (
      {'properties': {'raster_val': v}, 'geometry': s}
      for i, (s, v) in enumerate( shapes(newimage, mask=mask, transform=src.transform)))

geoms = list(results)

df  = gpd.GeoDataFrame.from_features(geoms)
df = df.set_crs(3006)
df["raster_val"] = np.floor(df["raster_val"]).astype(int) 
#Restore the original raster values
df.to_file(r"output.shp")


Code2:
(https://spatial-dev.guru/2022/04/16/polygonize-raster-using-rioxarray-and-geopandas/)

import numpy as np
import pandas as pd
import geopandas as gpd
import rioxarray as rx
from multiprocessing import Pool, cpu_count
from shapely.ops import unary_union
 
 
def union(x):
    return unary_union(x)
 
if __name__ == "__main__":
    print("Reading raster...")
    dem = rx.open_rasterio('abbottstown_pa/abbottstown_pa.dem')
    x, y, elevation = dem.x.values, dem.y.values, dem.values
    x, y = np.meshgrid(x, y)
    x, y, elevation = x.flatten(), y.flatten(), elevation.flatten()
 
    print("Converting to GeoDataFrame...")
    dem_pd = pd.DataFrame.from_dict({'elevation': elevation, 'x': x, 'y': y})
    dem_threshold = 170
    dem_pd = dem_pd[dem_pd['elevation'] > dem_threshold]
    dem_vector = gpd.GeoDataFrame(geometry=gpd.GeoSeries.from_xy(dem_pd['x'], dem_pd['y'], crs=dem.rio.crs))
    dem_vector = dem_vector.buffer(5, cap_style=3)
    dem_vector = dem_vector.to_crs('EPSG:4326')
    geom_arr = []
 
    # Converting GeoSeries to list of geometries
    geoms = list(dem_vector)
 
    # Converting geometries list to nested list of geometries
    for i in range(0, len(geoms), 10000):
        geom_arr.append(geoms[i:i+10000])
 
    # Creating multiprocessing pool to perform union operation of chunks of geometries
    with Pool(cpu_count()) as p:
        geom_union = p.map(union, geom_arr)
 
    # Perform union operation on returned unioned geometries
    total_union = unary_union(geom_union)
 
    # Creating GeoDataFrame for total_union
    union_vector_gdf = gpd.GeoDataFrame(geometry=gpd.GeoSeries(total_union))
 
    # Saving GeoDataFrame to shapefile
    union_vector_gdf.to_file(f"""dem_{dem_threshold}.shp""", crs='EPSG:4326')
